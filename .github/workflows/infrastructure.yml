name: Deploy Infrastructure & Container

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    env:
      TF_VAR_stage: 'prod'
      TF_VAR_db_name: ${{ secrets.DB_NAME }}
      TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
    timeout-minutes: 35
    permissions:
      id-token: write
      contents: write
      discussions: write
      issues: write
      pull-requests: write
      checks: write
      actions: write
    steps:
        
      - uses: actions/checkout@v3
      
      - uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::516207173224:role/github-actions
          aws-region: us-east-2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: server/deploy

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: server/deploy

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: server/deploy

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
        working-directory: server/deploy

      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: server/deploy

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
    
  docker:
    name: Build & Upload Docker Image
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'push'
    permissions:
      id-token: write
      contents: write
   
    steps:

      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::516207173224:role/github-actions
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Dynamically set MY_DATE environment variable
        run: echo "MY_DATE=2020-10-07T12:00:00+01:00" >> $GITHUB_ENV

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: tune-train-repo-prod
          IMAGE_TAG: tune-train
          DATE: ${{ steps.date.outputs.date }}

        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG:${{ env.MY_DATE }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG:${{ env.MY_DATE }}
        working-directory: server